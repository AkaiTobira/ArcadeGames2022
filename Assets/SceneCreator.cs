using UnityEditor;
using UnityEngine;
using System.Collections;
#if UNITY_EDITOR
    using UnityEditor.SceneManagement;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.IO;
#endif
public class SceneCreator : MonoBehaviour
{
    #if UNITY_EDITOR




    [MenuItem("Example/Convert")]
    static async void SaveActiveScene(){

        List<string> temp = new List<string>();
        foreach (UnityEditor.EditorBuildSettingsScene S in UnityEditor.EditorBuildSettings.scenes)
        {
            if (S.enabled)
            {
                string name = S.path.Substring(S.path.LastIndexOf('/')+1);
                name = name.Substring(0,name.Length-6);
                temp.Add(S.path);
            //    Debug.Log(S.path);
            }
        }

        string ss = "";

        foreach(string s in temp){

            for(int i = 0; i < (int)SupportedLanguages.MAX_COUNT; i++) {
                UnityEngine.SceneManagement.Scene scene = EditorSceneManager.OpenScene(s);
                AutoTranslator.Language = (SupportedLanguages)i;

                GameObject[] roots = scene.GetRootGameObjects();
            //    for(int j = 0; j < roots.Length; j++){
                    AutoTranslatorImage[] components = Resources.FindObjectsOfTypeAll<AutoTranslatorImage>();
                    AutoTranslatorAnimator[] components2 = Resources.FindObjectsOfTypeAll<AutoTranslatorAnimator>();

                    ss += components.Length + "//" + components2.Length;
                    for(int k =0; k < components.Length; k++){
                        components[k].ForceRefresh();
                        components[k].enabled = false;
                        PrefabUtility.RecordPrefabInstancePropertyModifications(components[k]);

                        await Task.Delay(100);
                    }

                    for(int r =0; r < components2.Length; r++){
                        components2[r].ForceRefresh();
                        components2[r].enabled = false;
                        PrefabUtility.RecordPrefabInstancePropertyModifications(components2[r]);

                        await Task.Delay(100);
                    }

                    ss += "\n" + s + " Opened with " + i.ToString() + "\n";
                //}

                if(components.Length + components2.Length > 0){
                    string[] path = EditorSceneManager.GetActiveScene().path.Split(char.Parse("/"));
                    path[path.Length - 1] = AutoTranslator.Language.ToString() + "_" + path[path.Length - 1];

                    EditorSceneManager.SaveScene(EditorSceneManager.GetActiveScene(), "Assets/_AutoGenerated/" + path[path.Length - 1]);
                }

            }
        }

        Debug.Log(ss);

    }

    static void GetAllChildrenComponents(ref List<AutoTranslatorUnitBase> list, Transform head){

        AutoTranslatorUnit text   = head.GetComponent<AutoTranslatorUnit>();
        AutoTranslatorImage image = head.GetComponent<AutoTranslatorImage>();
        AutoTranslatorAnimator anim = head.GetComponent<AutoTranslatorAnimator>();

        if(Guard.IsValid(text)) list.Add(text);
        if(Guard.IsValid(image)) list.Add(image);
        if(Guard.IsValid(anim)) list.Add(anim);
        

        for(int i = 0; i < head.childCount; i++) {
            GetAllChildrenComponents(ref list, head.GetChild(i));
        }
    }

    #endif
}
