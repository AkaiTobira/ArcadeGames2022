using UnityEditor;
using UnityEngine;
using System.Collections;
#if UNITY_EDITOR
    using UnityEditor.SceneManagement;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using System.IO;
#endif

public class SceneCreator : MonoBehaviour
{
    #if UNITY_EDITOR

    private static List<string> GetActiveScenesPaths(){
        List<string> paths = new List<string>();
        foreach (UnityEditor.EditorBuildSettingsScene S in UnityEditor.EditorBuildSettings.scenes)
        {
            if (S.enabled)
            {
                string name = S.path.Substring(S.path.LastIndexOf('/')+1);
                name = name.Substring(0,name.Length-6);
                paths.Add(S.path);
            }
        }

        return paths;
    }


    static async Task UpdateComponent<T>() where T : AutoTranslatorUnitBase{
        T[] c1 = Resources.FindObjectsOfTypeAll<T>();
        for(int j = 0; j < c1.Length; j++){
            c1[j].ForceRefresh();
            c1[j].enabled = true;
            PrefabUtility.RecordPrefabInstancePropertyModifications(c1[j]);

            await Task.Delay(100);
        }
    }

    static async Task FillAutotranslableConsts(List<string> paths){

        string debugLog = "";
        foreach(string path in paths){
            UnityEngine.SceneManagement.Scene scene = EditorSceneManager.OpenScene(path);

            await UpdateComponent<ConstAutoTranslatorImage>();
            await UpdateComponent<ConstAutoTranslatorAnimator>();

            debugLog += "\n" + path + " Opened\n";

            ConstAutoTranslatorImage[]    c1 = Resources.FindObjectsOfTypeAll<ConstAutoTranslatorImage>();
            ConstAutoTranslatorAnimator[] c2 = Resources.FindObjectsOfTypeAll<ConstAutoTranslatorAnimator>();
        
            if(c1.Length + c2.Length > 0){
                Debug.Log($"Replacing {path}");
                EditorSceneManager.SaveScene(EditorSceneManager.GetActiveScene(), path);
            }
        }
    }

    static async Task GenerateAutotranslableVariants(List<string> paths){

        string debugLog = "";
        foreach(string path in paths){

            for(int i = 0; i < (int)SupportedLanguages.MAX_COUNT; i++) {
                UnityEngine.SceneManagement.Scene scene = EditorSceneManager.OpenScene(path);
                AutoTranslator.Language = (SupportedLanguages)i;

                await UpdateComponent<AutoTranslatorImage>();
                await UpdateComponent<AutoTranslatorAnimator>();
                
//                debugLog += c1.Length + "//" + c2.Length;
                debugLog += "\n" + path + " Opened with " + i.ToString() + "\n";

                SaveGeneratedScene();
            }
        }

        Debug.Log(debugLog);
    }

    [MenuItem("Build/Generate Localized Scenes")]
    static async void SaveActiveScene(){
        List<string> paths = GetActiveScenesPaths();

        await GenerateAutotranslableVariants(paths);
        await FillAutotranslableConsts(paths);
    }

    static void SaveGeneratedScene(){
        AutoTranslatorImage[]    c1 = Resources.FindObjectsOfTypeAll<AutoTranslatorImage>();
        AutoTranslatorAnimator[] c2 = Resources.FindObjectsOfTypeAll<AutoTranslatorAnimator>();
        
        if(c1.Length + c2.Length > 0){

            for(int i = 0; i < c1.Length; i++){ DestroyImmediate(c1[i]); }
            for(int i = 0; i < c2.Length; i++){ DestroyImmediate(c2[i]); }

            string[] path = EditorSceneManager.GetActiveScene().path.Split(char.Parse("/"));
            path[path.Length - 1] = AutoTranslator.Language.ToString() + "_" + path[path.Length - 1];
            EditorSceneManager.SaveScene(EditorSceneManager.GetActiveScene(), "Assets/_AutoGenerated/" + path[path.Length - 1]);
        }
    }

    #endif
}
